/*
 * OpenAPI Petstore
 * sample spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.client.JSON;


import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using=ComposedAnyOfInlineValidation.ComposedAnyOfInlineValidationDeserializer.class)
@JsonSerialize(using = ComposedAnyOfInlineValidation.ComposedAnyOfInlineValidationSerializer.class)
public class ComposedAnyOfInlineValidation extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ComposedAnyOfInlineValidation.class.getName());

    public static class ComposedAnyOfInlineValidationSerializer extends StdSerializer<ComposedAnyOfInlineValidation> {
        public ComposedAnyOfInlineValidationSerializer(Class<ComposedAnyOfInlineValidation> t) {
            super(t);
        }

        public ComposedAnyOfInlineValidationSerializer() {
            this(null);
        }

        @Override
        public void serialize(ComposedAnyOfInlineValidation value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class ComposedAnyOfInlineValidationDeserializer extends StdDeserializer<ComposedAnyOfInlineValidation> {
        public ComposedAnyOfInlineValidationDeserializer() {
            this(ComposedAnyOfInlineValidation.class);
        }

        public ComposedAnyOfInlineValidationDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public ComposedAnyOfInlineValidation deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            // deserialzie Long
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(Long.class);
                ComposedAnyOfInlineValidation ret = new ComposedAnyOfInlineValidation();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'ComposedAnyOfInlineValidation'", e);
            }

            throw new IOException(String.format("Failed deserialization for ComposedAnyOfInlineValidation: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public ComposedAnyOfInlineValidation getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "ComposedAnyOfInlineValidation cannot be null");
        }
    }

    // store a list of schema names defined in anyOf
    public final static Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ComposedAnyOfInlineValidation() {
        super("anyOf", Boolean.FALSE);
    }
  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  @JsonAnySetter
  public ComposedAnyOfInlineValidation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }

    /**
     * Return true if this ComposedAnyOfInlineValidation object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        return super.equals(o) && Objects.equals(this.additionalProperties, ((ComposedAnyOfInlineValidation)o).additionalProperties);
    }

    @Override
    public int hashCode() {
        return Objects.hash(getActualInstance(), isNullable(), getSchemaType(), additionalProperties);
    }
    public ComposedAnyOfInlineValidation(Long o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Long", new GenericType<Long>() {
        });
        JSON.registerDescendants(ComposedAnyOfInlineValidation.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ComposedAnyOfInlineValidation.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * Long
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(Long.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Long");
    }

    /**
     * Get the actual instance, which can be the following:
     * Long
     *
     * @return The actual instance (Long)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Long`. If the actual instanct is not `Long`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Long`
     * @throws ClassCastException if the instance is not `Long`
     */
    public Long getLong() throws ClassCastException {
        return (Long)super.getActualInstance();
    }

}

